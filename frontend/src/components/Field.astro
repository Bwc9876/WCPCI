---
import type { Props as LabelProps } from "@/components/Label.astro";
import type { HTMLAttributes } from "astro/types";

type BaseProps = {
    label?: string;
    noTemplate?: boolean;
    fieldName?: string;
    formObj?: string;
    forceInvalid?: boolean;
    required?: boolean;
    hideLabel?: boolean;
};

type InputProps =
    | ({ options?: undefined } & HTMLAttributes<"input">)
    | ({ type: "textarea"; options?: undefined } & HTMLAttributes<"textarea">)
    | ({ type: "select"; options: [string, string][] } & HTMLAttributes<"select">);

export type Props = BaseProps & Omit<Omit<LabelProps, "isCheckbox">, "label"> & InputProps;

import Label from "@/components/Label.astro";
import { variable, tag } from "@/lib/tera";
import { Icon } from "astro-icon/components";

// Remove underscores, hyphens, and periods from a string and replace them with spaces
// Capitalize the first letter of each word
const makeLabel = (str: string) => {
    return str.replaceAll(/[_\-\.]/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());
};

const {
    noTemplate = false,
    name,
    formObj = "form",
    fieldName = name,
    label = (name && makeLabel(name)) || "",
    help,
    type,
    options,
    required = false,
    hideLabel = false,
    forceInvalid,
    value = noTemplate
        ? undefined
        : variable(
              `${formObj}.data | get(key='${fieldName}'${type === "checkbox" ? ",default='false'" : ""})`
          ),
    class: className,
    ...rest
} = Astro.props;

const isCheckbox = type === "checkbox";

const valueNoBraces = noTemplate ? "" : (value as string)?.replace?.(/{{\s|\s}}/g, "") ?? "";

const errorVar = `${formObj}.errors | get(key='${fieldName}', default=[])`;

const baseClass = [
    "peer",
    "p-2",
    "w-full",
    "rounded-xl",
    "border-2",
    "bg-secondary-50",
    "border-solid",
    "border-primary-50",
    "disabled:bg-primary-50",
    "disabled:border-none",
    "read-only:bg-primary-50",
    "read-only:border-none",
    "focus:outline-none",
    "focus:ring",
    "focus:ring-secondary-200",
    "[&:user-invalid]:border-red-500",
    "[&:user-invalid]:ring-red-600",
    "[&:user-invalid]:text-red-600",
    "data-[invalid=true]:border-red-500",
    "data-[invalid=true]:ring-red-600",
    "data-[invalid=true]:text-red-500"
].join(" ");

const fileClass =
    "file:bg-secondary enabled:bg-secondary-50 file:hover:bg-secondary-300 file:rounded file:text-sm file:border-none file:text-text-950 file:me-2";

const checkClass = ""; // Empty for now, might make checkboxes fancier later

const dataInvalid =
    forceInvalid !== undefined
        ? forceInvalid.toString()
        : noTemplate
          ? "false"
          : `${tag(`if ${errorVar} | length == 0`)}false${tag("else")}true${tag("endif")}`;

const bigRightTypes: (astroHTML.JSX.HTMLInputTypeAttribute | "textarea" | "select")[] = [
    "number",
    "date",
    "datetime-local"
];
---

<Label
    class:list={["w-full"]}
    hideText={hideLabel}
    errorVar={noTemplate ? undefined : errorVar}
    label={label}
    help={help}
    isCheckbox={isCheckbox}
    isRequired={required}
>
    <div class="relative">
        {
            type === "textarea" ? (
                <textarea
                    set:html={value}
                    required={required}
                    name={name}
                    data-invalid={dataInvalid}
                    class:list={[baseClass, "resize-none", className ?? ""]}
                    {...rest}
                />
            ) : type === "select" ? (
                <select
                    name={name}
                    required={required}
                    data-invalid={dataInvalid}
                    data-dbg-value={value}
                    class:list={[baseClass, "enabled:bg-secondary-50", className ?? ""]}
                    {...rest}
                >
                    {options.map(([optValue, label]) => (
                        <option
                            value={optValue}
                            data-phantom={
                                noTemplate
                                    ? ""
                                    : `${tag(`if ${valueNoBraces} == '${optValue}'`)}${variable("fake_attr(attr='selected') | safe")}${tag("endif")}`
                            }
                        >
                            {label}
                        </option>
                    ))}
                    <slot name="options_templated" />
                </select>
            ) : (
                <input
                    value={type === "checkbox" ? "true" : value}
                    data-phantom={
                        noTemplate || type !== "checkbox"
                            ? ""
                            : `${tag(`if ${valueNoBraces} == 'true'`)}${variable("fake_attr(attr='checked') | safe")}${tag("endif")}`
                    }
                    name={name}
                    required={required}
                    data-invalid={dataInvalid}
                    type={type}
                    class:list={[
                        baseClass,
                        type === "checkbox" ? checkClass : "",
                        type === "file" ? fileClass : "",
                        className ?? ""
                    ]}
                    {...rest}
                />
            )
        }
        <Icon
            name="tabler:x"
            size={22}
            class={`hidden absolute ${type === "textarea" ? "top-2" : "inset-y-1/4"} ${type === "select" ? "right-4" : bigRightTypes.includes(type ?? "text") ? "right-8" : "right-2"} text-red-600 peer-[&:user-invalid]:inline peer-data-[invalid=true]:inline`}
        />
    </div>
</Label>
