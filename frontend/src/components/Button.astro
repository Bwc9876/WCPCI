---
import { Icon } from "astro-icon/components";
import type { HTMLTag, Polymorphic } from "astro/types";
import Spinner from "./Spinner.astro";

export type Color = "primary" | "secondary" | "accent" | "danger" | "custom";
type Size = "sm" | "md" | "lg" | "xl" | "2xl";

export type Props<T extends HTMLTag> = Polymorphic<{ as: T }> & {
    icon?: string;
    justIcon?: boolean;
    loadOnFormSubmit?: boolean;
    forceLoad?: boolean;
    loadingText?: string;
    color?: Color;
    size?: Size;
    forceMargin?: string;
};

const {
    as: Component = "button",
    size = "md",
    color = "primary",
    icon,
    justIcon = false,
    forceLoad = false,
    loadOnFormSubmit = false,
    loadingText = "Loading...",
    forceMargin = "auto",
    class: className,
    ...rest
} = Astro.props;

const MarginMap = {
    auto: "my-auto",
    "2": "my-2"
} as Record<string, string>;

const ColorMap = {
    primary: "bg-primary-400 [&:not(:disabled)]:hover:bg-primary-500 text-white",
    secondary: "bg-secondary [&:not(:disabled)]:hover:bg-secondary-300 text-text-950",
    accent: "bg-accent-400 [&:not(:disabled)]:hover:bg-accent-500 text-text-950",
    danger: "bg-red-500 [&:not(:disabled)]:hover:bg-red-600 text-white",
    custom: ""
} as Record<Color, string>;

const SizeMap = {
    sm: "text-sm",
    md: "text-md",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl"
} as Record<Size, string>;

const IconSizeMap = {
    sm: 15,
    md: 20,
    lg: 25,
    xl: 30,
    "2xl": 35
} as Record<Size, number>;

const wrapperIconClass = "flex flex-row";
---

<Component
    class:list={[
        "disabled:bg-initial rounded-xl p-2 disabled:opacity-75",
        ColorMap[color as Color],
        SizeMap[size as Size],
        loadOnFormSubmit ? "load-on-form-submit" : "",
        className ?? ""
    ]}
    {...rest}
>
    {
        icon !== undefined || loadOnFormSubmit ? (
            <span
                data-loading-text={loadingText}
                class:list={[justIcon ? "" : "gap-1 pe-1", wrapperIconClass]}
            >
                {icon && (
                    <Icon
                        name={icon}
                        size={IconSizeMap[size as Size]}
                        class:list={["action-icon", MarginMap[forceMargin as string]]}
                    />
                )}
                {loadOnFormSubmit && (
                    <Spinner
                        size={size}
                        class:list={[
                            MarginMap[forceMargin as string],
                            forceLoad ? "" : "loading-icon hidden"
                        ]}
                    />
                )}
                <span class:list={["loc-text", MarginMap[forceMargin as string]]}>
                    <slot />
                </span>
            </span>
        ) : (
            <slot />
        )
    }
</Component>

<script>
    document.addEventListener("astro:page-load", () => {
        const forms = document.querySelectorAll("form");

        forms.forEach((form) => {
            form.addEventListener(
                "submit",
                () => {
                    const button = form.querySelector(".load-on-form-submit");
                    if (button) {
                        const icon = button.querySelector(`:scope .action-icon`);
                        const loading = button.querySelector(`:scope .loading-icon`);
                        const text = button.querySelector(`:scope .loc-text`);

                        setTimeout(() => button.setAttribute("disabled", "true"), 20);

                        if (text) {
                            text.textContent =
                                button.attributes.getNamedItem("data-loading-text")?.value ??
                                "Loading...";
                        }

                        if (icon) {
                            icon.classList.add("hidden");
                        }
                        if (loading) {
                            loading.classList.remove("hidden");
                        }
                    }
                },
                { once: true }
            );
        });
    });
</script>
