---
import type { HTMLAttributes } from "astro/types";

type Color = "white" | "primary" | "secondary" | "inherit";
type Size = "sm" | "md" | "lg" | "xl" | "2xl" | "inherit";

export interface Props extends HTMLAttributes<"span"> {
    class?: string;
    color?: Color;
    size?: Size;
}

const { class: className, color = "inherit", size = "inherit", ...rest } = Astro.props;

const ColorMap = {
    white: "text-white",
    primary: "text-primary",
    secondary: "text-secondary",
    inherit: "text-inherit"
} as Record<Color, string>;

const SizeMap = {
    sm: "text-sm",
    md: "text-md",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl"
} as Record<Size, string>;
---

<span class:list={["inline-block", ColorMap[color], SizeMap[size], className ?? ""]} {...rest}
></span>

<style>
    span {
        --b: 0.35em; /* border thickness */
        --n: 15; /* number of dashes*/
        --g: 10deg; /* gap  between dashes*/
        --c: currentcolor; /* the color */

        width: 1.2em;
        height: 1.2em;
        aspect-ratio: 1;
        border-radius: 50%;
        padding: 1px;
        background: conic-gradient(#0000, var(--c)) content-box;
        --_m: repeating-conic-gradient(
                #0000 0deg,
                #000 1deg calc(360deg / var(--n) - var(--g) - 1deg),
                #0000 calc(360deg / var(--n) - var(--g)) calc(360deg / var(--n))
            ),
            radial-gradient(farthest-side, #0000 calc(98% - var(--b)), #000 calc(100% - var(--b)));
        -webkit-mask: var(--_m);
        mask: var(--_m);
        -webkit-mask-composite: destination-in;
        mask-composite: intersect;
        animation: load 1s infinite steps(var(--n));
    }
    @keyframes load {
        to {
            transform: rotate(1turn);
        }
    }
</style>
