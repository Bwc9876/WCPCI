---
import BreadCrumb from "@/components/BreadCrumb.astro";
import Button from "@/components/Button.astro";
import CaseIndicator from "@/components/CaseIndicator.astro";
import Field from "@/components/Field.astro";
import Link from "@/components/Link.astro";
import ProblemRun from "@/components/ProblemRun.astro";
import Tile from "@/components/Tile.astro";
import Debug from "@/components/tera/Debug.astro";
import Variable from "@/components/tera/Variable.astro";
import Layout from "@/layouts/Layout.astro";
import { variable } from "@/lib/tera";
import { Icon } from "astro-icon/components";
---

<Layout noGrow class="flex flex-col justify-stretch gap-4" title=`${variable("problem.name")}`>
    <textarea class="hidden" id="code-info">{variable("code_info | safe")}</textarea>
    <Button
        class="example-button absolute right-2 top-4 mx-auto mb-1 hidden w-fit"
        disabled
        as="button"
        size="sm"
        id="test-debug-template"
        color="secondary"
        icon="tabler:play">Run Example</Button
    >
    <Tile class="flex flex-col gap-2">
        <BreadCrumb
            entries={[
                ["Problems", "/problems"],
                [variable("problem.name"), "/problems/" + variable("problem.id", "view")]
            ]}
        />
        <div class="flex flex-row gap-4">
            <span class="my-auto text-xl">Progress:</span>
            <ProblemRun casesName="case_count" class="grow" objName="last_run" />
            <div class="flex flex-row gap-1">
                <Button
                    as="button"
                    disabled
                    data-problem-id={variable("problem.id")}
                    data-default-language={variable("default_language")}
                    class="my-auto w-fit"
                    id="submit"
                    color="primary"
                    icon="tabler:star">Submit!</Button
                >
                <Button
                    size="lg"
                    as="a"
                    href=`/problems/${variable("problem.id")}/runs`
                    class="my-auto w-fit"
                    justIcon
                    icon="tabler:clock"
                    color="secondary"
                />
            </div>
        </div>
    </Tile>
    <div class="flex grow flex-row gap-4 overflow-hidden">
        <Tile class="flex w-2/5 flex-col gap-2 overflow-hidden">
            <h1 class="text-2xl"><Variable expression="problem.name" /></h1>
            <small class="text-gray-500">CPU Time: <Variable expression="problem.cpu_time" /></small
            >
            <div class="overflow-y-auto">
                <div class="overflow-y-scroll pe-2" id="rendered-md">
                    <Variable
                        expression="render_markdown(md=problem.description) | safe"
                        debugLorem={50}
                    />
                </div>
            </div>
        </Tile>
        <div class="flex w-3/5 grow flex-col gap-4">
            <Tile class="flex h-[60%] flex-col gap-2">
                <div class="flex flex-row gap-2">
                    <img
                        class="select-none opacity-0 invert"
                        width="32"
                        height="32"
                        class="hidden"
                        id="language-icon"
                    />
                    <Field
                        hideLabel
                        noTemplate
                        id="language-dropdown"
                        name="Language"
                        value=""
                        type="select"
                        options={[]}
                    />
                </div>
                <div
                    id="editor"
                    class="align-center flex h-full w-full justify-center rounded-2xl bg-background-50 p-2"
                >
                    <Icon
                        class="my-auto animate-pulse text-blue-300"
                        name="tabler:pencil"
                        size={60}
                    />
                </div>
            </Tile>
            <Tile class="align-center flex h-[40%] w-full flex-row gap-4">
                <div class="flex h-full grow flex-col gap-2">
                    <Field
                        spellcheck="false"
                        data-gramm="false"
                        data-gramm_editor="false"
                        data-enable-grammarly="false"
                        rows={10}
                        class="h-full"
                        type="textarea"
                        noTemplate
                        id="debug-input"
                        label="Input"
                    />
                </div>
                <div class="flex basis-1/6 flex-col justify-center gap-2 align-middle">
                    <CaseIndicator
                        class="mx-auto -mb-8 mt-auto"
                        id="test-indicator"
                        status="idle"
                        size={40}
                    />
                    <Button
                        class="mx-auto mb-1 mt-auto w-fit"
                        as="button"
                        disabled
                        id="run-debug"
                        color="secondary"
                        icon="tabler:bug">Test</Button
                    >
                </div>
                <div class="flex h-full grow flex-col gap-2">
                    <Field
                        id="debug-output"
                        rows={10}
                        type="textarea"
                        noTemplate
                        readonly
                        label="Output"
                    />
                </div>
            </Tile>
        </div>
    </div>
</Layout>

<style is:global>
    #rendered-md > * {
        @apply !my-1 !py-2;
    }

    #rendered-md a {
        @apply text-accent underline hover:text-accent-600;
    }

    #rendered-md h1 {
        @apply text-3xl font-bold;
    }

    #rendered-md h2 {
        @apply text-2xl font-bold;
    }

    #rendered-md h3 {
        @apply text-xl font-bold;
    }

    #rendered-md h4 {
        @apply text-lg font-bold;
    }

    #rendered-md h5 {
        @apply text-base font-bold;
    }

    #rendered-md h6 {
        @apply text-sm font-bold;
    }

    #rendered-md p {
        @apply text-base;
    }

    #rendered-md ul {
        @apply list-inside list-disc;
    }

    #rendered-md ol {
        @apply list-inside list-decimal;
    }

    #rendered-md blockquote {
        @apply border-l-4 border-l-accent pl-2;
    }

    #rendered-md :not(pre) > code:not(.language-math) {
        @apply rounded bg-secondary-50 p-1 font-mono;
    }

    #rendered-md pre code.hljs {
        @apply rounded-lg !bg-secondary-50;
    }

    #rendered-md
        pre
        code:is([class*=" language-"], [class^="language-"]):not(.language-example):not(
            .language-math
        ):not(.hljs) {
        @apply opacity-0;
    }

    #language-icon {
        user-drag: none;
        -webkit-user-drag: none;
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        pointer-events: none;
    }
</style>

<script>
    import * as monaco from "monaco-editor";
    import monacoTheme from "@/lib/wcpc-monaco.json";

    monaco.editor.defineTheme("wcpc", monacoTheme as any);

    import "katex/dist/katex.css";
    import katex from "katex";

    import "highlight.js/styles/default.css";
    import "highlight.js/styles/an-old-hope.css";
    import hljs from "highlight.js/lib/core";
    import javascript from "highlight.js/lib/languages/javascript";
    import plaintext from "highlight.js/lib/languages/plaintext";
    import python from "highlight.js/lib/languages/python";
    import rust from "highlight.js/lib/languages/rust";

    import type { WebSocketRequest, WebSocketMessage, JobState, CaseStatus } from "@/lib/ws";
    import type { Status } from "@/components/CaseIndicator.astro";

    type CodeInfo = {
        [lang: string]: {
            name: string;
            tablerIcon: string;
            monacoContribution: string;
            defaultCode: string;
            fileName: string;
        };
    };

    type MonacoEditor = monaco.editor.IStandaloneCodeEditor;

    declare global {
        interface Window {
            ws?: WebSocket;
            stylesClone?: HTMLStyleElement;
            codeEditor?: MonacoEditor;
            currentLanguage?: string;
            require?: (mods: string[], cb: (...mods: any[]) => void, err: any) => void;
        }
    }

    const stateIsComplete = (state: JobState) => {
        switch (state.type) {
            case "judging":
                return !state.cases.some((c) => c.status === "pending" || c.status === "running");
            case "testing":
                return state.status.status !== "pending" && state.status.status !== "running";
        }
    };

    const typeToStatus: Record<CaseStatus["status"], Status> = {
        failed: "error",
        passed: "success",
        notRun: "empty",
        pending: "idle",
        running: "loading"
    };

    const makeIconUrl = (name: string) =>
        `https://raw.githubusercontent.com/tabler/tabler-icons/main/icons/outline/${name}.svg`;

    document.addEventListener("astro:page-load", async () => {
        if (window.codeEditor) {
            window.codeEditor.dispose();
            window.codeEditor = undefined;
        }
        if (window.ws) {
            window.ws.close();
            window.ws = undefined;
        }

        if (!window.location.pathname.match(/\/problems\/\d+\/?$/)) {
            return;
        }

        const submitButton = (document.querySelector("#submit") as HTMLButtonElement)!;
        const codeInfoElem = (document.querySelector("#code-info") as HTMLTextAreaElement)!;
        const runDebugButton = (document.querySelector("#run-debug") as HTMLButtonElement)!;
        const testInput = (document.querySelector("#debug-input") as HTMLTextAreaElement)!;
        const testOutput = (document.querySelector("#debug-output") as HTMLTextAreaElement)!;
        const debugCaseIndicator = (document.querySelector("#test-indicator") as HTMLElement)!;
        const runMessage = (document.querySelector("#runs-msg") as HTMLElement)!;
        const languageDropdown = (document.querySelector(
            "#language-dropdown"
        ) as HTMLSelectElement)!;
        const languageIcon = (document.querySelector("#language-icon") as HTMLImageElement)!;
        const runMessageWrapper = (document.querySelector("#runs-msg-wrapper") as HTMLElement)!;
        const testButtonTemplate = (document.querySelector(
            "#test-debug-template"
        ) as HTMLButtonElement)!;

        const toggleButtons = (disabled: boolean) => {
            submitButton.disabled = disabled;
            runDebugButton.disabled = disabled;
            document.querySelectorAll(".example-button").forEach((b) => {
                (b as HTMLButtonElement).disabled = disabled;
            });
        };

        const problemId = submitButton.dataset.problemId!;
        const defaultLanguage = submitButton.dataset.defaultLanguage!;
        const codeInfo = JSON.parse(codeInfoElem.value ?? "{}") as CodeInfo;

        for (const name in codeInfo) {
            const info = codeInfo[name];
            const newElem = document.createElement("option");
            newElem.value = name;
            newElem.innerText = info.name;
            languageDropdown.appendChild(newElem);
        }

        //languageDropdown.value = defaultLanguage;

        languageDropdown.onchange = (e) => {
            const lang = (e.target as HTMLSelectElement).value;
            const langInfo = codeInfo[lang];
            if (langInfo) {
                window.currentLanguage = lang;
                languageIcon.src = makeIconUrl(langInfo.tablerIcon);
                if (window.codeEditor) {
                    const storedCode = JSON.parse(
                        window.localStorage.getItem(`problem-${problemId}-${lang}-code`) ?? "null"
                    );
                    window.codeEditor.setValue(storedCode ?? langInfo.defaultCode);
                    monaco.editor.setModelLanguage(
                        window.codeEditor.getModel()!,
                        langInfo.monacoContribution
                    );
                    window.localStorage.setItem(
                        `problem-${problemId}-code`,
                        JSON.stringify([storedCode, lang])
                    );
                }
            }
        };

        const url = `ws://${window.location.host}/run/ws/${problemId}`;

        console.debug("Connecting to WebSocket at", url);

        const ws = new WebSocket(url);

        window.ws = ws;

        ws.onopen = () => {
            console.debug("WebSocket connection established");
            toggleButtons(false);
        };

        ws.onmessage = (event) => {
            const message: WebSocketMessage = JSON.parse(event.data);
            console.debug("Received message", message);

            switch (message.type) {
                case "stateUpdate":
                    const state = message.state as JobState;
                    const complete = stateIsComplete(state);
                    toggleButtons(!complete);
                    switch (state.type) {
                        case "judging":
                            for (const [i, c] of state.cases.entries()) {
                                document
                                    .querySelector(`[data-case-number='${i}']`)!
                                    .setAttribute("data-status", typeToStatus[c.status]);
                            }
                            if (complete) {
                                const firstWithErr = state.cases.find((c) => c.status === "failed");
                                if (firstWithErr && firstWithErr.status === "failed") {
                                    runMessageWrapper.setAttribute("data-status", "error");
                                    runMessage.innerText = firstWithErr.content;
                                } else {
                                    runMessageWrapper.setAttribute("data-status", "success");
                                    runMessage.innerText = "Passed!";
                                }
                            } else {
                                runMessageWrapper.setAttribute("data-status", "loading");
                                runMessage.innerText = "Running...";
                            }
                            break;
                        case "testing":
                            debugCaseIndicator.setAttribute(
                                "data-status",
                                typeToStatus[state.status.status]
                            );
                            switch (state.status.status) {
                                case "passed":
                                    testOutput.value = state.status.content ?? "";
                                    break;
                                case "failed":
                                    testOutput.value = state.status.content ?? "";
                                    break;
                            }
                    }
                    break;
                case "invalid":
                    console.error("Invalid message sent", message);
                    break;
                case "runDenied":
                    toggleButtons(true);
                    break;
                case "runStarted":
                    toggleButtons(true);
                    break;
            }
        };

        ws.onclose = () => {
            console.debug("WebSocket connection closed");
            toggleButtons(true);
            runMessageWrapper.setAttribute("data-status", "disconnected");
            runMessage.innerText = "Disconnected, please refresh the page.";
        };

        ws.onerror = (error) => {
            console.error("WebSocket error:", error);
        };

        runDebugButton.onclick = () => {
            if (window.codeEditor && window.currentLanguage) {
                const req: WebSocketRequest = {
                    type: "test",
                    input: testInput.value,
                    language: window.currentLanguage,
                    program: window.codeEditor.getValue()
                };
                console.debug("Sending request", req);
                ws.send(JSON.stringify(req));
            }
        };

        submitButton.onclick = () => {
            if (window.codeEditor && window.currentLanguage) {
                const req: WebSocketRequest = {
                    type: "judge",
                    program: window.codeEditor.getValue(),
                    language: window.currentLanguage
                };
                console.debug("Sending request", req);
                ws.send(JSON.stringify(req));
            }
        };

        // Monaco Initialization
        const editorElem = document.getElementById("editor");
        setTimeout(async () => {
            console.debug("Initializing Monaco", editorElem);
            //let monaco = await loadMonaco();
            console.debug("Monaco initialized", monaco);

            const [storedCode, storedLang] = JSON.parse(
                window.localStorage.getItem(`problem-${problemId}-code`) ?? "[null, null]"
            );

            const lang = Object.keys(codeInfo).includes(storedLang ?? "")
                ? storedLang
                : defaultLanguage;

            const langInfo = codeInfo[lang];

            window.currentLanguage = lang;

            languageDropdown.value = lang;
            languageIcon.src = makeIconUrl(langInfo.tablerIcon);
            setTimeout(() => languageIcon.classList.remove("opacity-0"), 300);

            console.debug(langInfo);

            window.codeEditor = monaco!.editor.create(editorElem as HTMLElement, {
                value: storedCode ?? langInfo.defaultCode,
                theme: "wcpc",
                language: langInfo.monacoContribution,
                automaticLayout: true,
                minimap: { enabled: false }
            });
            if (window.stylesClone) {
                const newStyles = window.stylesClone.cloneNode(true) as HTMLStyleElement;
                document.head.appendChild(newStyles);
            } else {
                window.stylesClone = document.head.querySelector(
                    ".monaco-colors"
                ) as HTMLStyleElement;
            }
            let currentTimeout: number | undefined = undefined;
            let currentLang = lang;
            window.codeEditor!.onDidChangeModelContent(() => {
                if (currentTimeout) {
                    clearTimeout(currentTimeout);
                }
                currentTimeout = setTimeout(() => {
                    if (window.codeEditor && currentLang === window.currentLanguage) {
                        const text = window.codeEditor.getValue();
                        const language = window.codeEditor.getModel()?.getLanguageId();
                        window.localStorage.setItem(
                            `problem-${problemId}-code`,
                            JSON.stringify([text, language])
                        );
                        window.localStorage.setItem(
                            `problem-${problemId}-${window.currentLanguage}-code`,
                            JSON.stringify(text)
                        );
                    }
                }, 1000) as unknown as number;
                currentLang = window.currentLanguage!;
            });
            console.debug("Instantiated Monaco editor", window.codeEditor);
        }, 100);

        // Katex Initialization
        document.querySelectorAll("#rendered-md code.math-inline").forEach((block) => {
            katex.render(block.textContent ?? "", block as HTMLElement, { throwOnError: true });
        });
        document.querySelectorAll("#rendered-md pre code.math-display").forEach((block) => {
            katex.render(block.textContent ?? "", block as HTMLElement, {
                throwOnError: true,
                displayMode: true
            });
        });

        // Highlight.js Initialization
        hljs.registerLanguage("javascript", javascript);
        hljs.registerLanguage("js", javascript);
        hljs.registerLanguage("python", python);
        hljs.registerLanguage("py", python);
        hljs.registerLanguage("rust", rust);
        hljs.registerLanguage("rs", rust);
        hljs.registerLanguage("example", plaintext);

        document
            .querySelectorAll("#rendered-md pre code:not(.language-math):not(language-example)")
            .forEach((block) => {
                hljs.highlightElement(block as HTMLElement);
            });

        const makePreCode = (text: string): HTMLPreElement => {
            const pre = document.createElement("pre");
            const code = document.createElement("code");
            code.classList.add("language-example");
            code.textContent = text;
            pre.appendChild(code);
            return pre;
        };

        document.querySelectorAll("#rendered-md pre code.language-example").forEach((block) => {
            const wrapperElem = document.createElement("div");
            wrapperElem.classList.add("relative");
            const clonedButton = testButtonTemplate.cloneNode(true) as HTMLButtonElement;
            clonedButton.removeAttribute("id");
            clonedButton.classList.remove("hidden");
            clonedButton.onclick = () => {
                testInput.value = block.textContent ?? "";
                runDebugButton.click();
            };
            wrapperElem.appendChild(clonedButton);
            const newBlock = makePreCode(block.textContent ?? "");
            wrapperElem.appendChild(newBlock);
            block.parentElement!.replaceWith(wrapperElem);
            hljs.highlightElement(newBlock.childNodes[0] as HTMLElement);
        });
    });
</script>
