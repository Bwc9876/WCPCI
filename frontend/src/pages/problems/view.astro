---
import BreadCrumb from "@/components/BreadCrumb.astro";
import Button from "@/components/Button.astro";
import CaseIndicator from "@/components/CaseIndicator.astro";
import Field from "@/components/Field.astro";
import Label from "@/components/Label.astro";
import ProblemRun from "@/components/ProblemRun.astro";
import Tile from "@/components/Tile.astro";
import Title from "@/components/Title.astro";
import Else from "@/components/tera/Else.astro";
import For from "@/components/tera/For.astro";
import If from "@/components/tera/If.astro";
import Variable from "@/components/tera/Variable.astro";
import ContestLayout from "@/layouts/ContestLayout.astro";
import { themeClass, variable } from "@/lib/tera";
import { Icon } from "astro-icon/components";

const description = `${variable("problem.name")} from ${variable("contest.name")}, WCPC. ${variable("problem.description | truncate(length=100)")}`;
---

<ContestLayout
    noGrow
    path=`/contests/${variable("contest.id")}/problems/${variable("problem.slug")}`
    class="flex flex-col justify-stretch gap-4"
    title=`${variable("problem.name")}`
    description={description}
>
    <textarea class="hidden" id="code-info">{variable("code_info | safe")}</textarea>
    <Button
        class="example-button absolute right-2 top-4 mx-auto mb-1 hidden w-fit"
        disabled
        as="button"
        size="sm"
        id="test-debug-template"
        color="secondary"
        icon="tabler:play">Run Example</Button
    >
    <Tile class="flex flex-col gap-2">
        <BreadCrumb
            entries={[
                ["Contests", "/contests"],
                [variable("contest.name"), `/contests/${variable("problem.contest_id")}`],
                ["Problems", `/contests/${variable("problem.contest_id")}/problems`],
                [
                    variable("problem.name"),
                    `/contests/${variable("problem.contest_id")}/problems/${variable("problem.slug")}`
                ]
            ]}
        />
        <div class="flex flex-row gap-4">
            <Title class="my-auto"><Variable expression="problem.name" /></Title>
            <If expression="logged_in">
                <ProblemRun casesName="case_count" objName="last_run" class="grow" />
                <Else slot="else">
                    <span class="grow"></span>
                    <Button
                        size="lg"
                        as="a"
                        href=`/auth/login`
                        class="my-auto w-fit"
                        icon="tabler:login-2"
                        color="secondary">Login or Register to Submit</Button
                    >
                </Else>
            </If>
            <div class="flex flex-row gap-1">
                <Button
                    as="button"
                    disabled
                    data-contest-id={variable("problem.contest_id")}
                    data-problem-id={variable("problem.id")}
                    data-problem-slug={variable("problem.slug")}
                    data-default-language={variable("default_language")}
                    data-logged-in={variable("logged_in")}
                    data-color-preference={themeClass("light", "dark", "system")}
                    class:list={["my-auto w-fit data-[logged-in='false']:hidden"]}
                    id="submit"
                    color="primary"
                    icon="tabler:star">Submit!</Button
                >
                <If expression="logged_in">
                    <Button
                        size="lg"
                        as="a"
                        href=`/contests/${variable("problem.contest_id")}/problems/${variable("problem.slug")}/runs`
                        class="my-auto w-fit"
                        justIcon
                        icon="tabler:clock"
                        color="secondary"
                    />
                </If>
                <If expression="can_edit">
                    <Button
                        size="lg"
                        as="a"
                        href=`/contests/${variable("problem.contest_id")}/problems/${variable("problem.slug")}/edit`
                        class="my-auto w-fit"
                        justIcon
                        icon="tabler:pencil"
                        color="secondary"
                    />
                </If>
            </div>
        </div>
    </Tile>
    <div class="flex grow flex-row gap-4 overflow-hidden">
        <Tile
            class="group flex flex-row gap-1 overflow-hidden !p-0 has-[[data-expanded='true']]:w-2/5"
        >
            <div
                class="mb-4 ms-4 mt-4 flex grow flex-col gap-2 overflow-hidden group-has-[[data-expanded='false']]:hidden"
            >
                <h2 class="text-2xl">Description</h2>
                <small class="text-gray-500"
                    >CPU Time: <Variable expression="problem.cpu_time" /> second<Variable
                        expression="problem.cpu_time | pluralize"
                    /></small
                >
                <div class="overflow-y-auto">
                    <div class="overflow-y-auto" id="rendered-md">
                        <Variable
                            expression="render_markdown(md=problem.description) | safe"
                            debugLorem={50}
                        />
                    </div>
                </div>
            </div>
            <div
                data-expanded="true"
                id="description-section-chevron"
                class="group flex justify-center self-stretch px-2 align-middle"
            >
                <Icon
                    class="my-auto hidden group-[[data-expanded='true']]:inline"
                    name="tabler:chevron-left"
                    size={32}
                />
                <Icon
                    class="my-auto hidden group-[[data-expanded='false']]:inline"
                    name="tabler:chevron-right"
                    size={32}
                />
            </div>
        </Tile>
        <div class="group flex w-3/5 grow flex-col gap-4">
            <Tile class="flex h-[60%] grow flex-col gap-2">
                <h2 class="text-2xl">Editor</h2>
                <div class="flex flex-row gap-2">
                    <img
                        class:list={[
                            "select-none opacity-0",
                            themeClass("", "invert", "dark:invert")
                        ]}
                        width="32"
                        height="32"
                        id="language-icon"
                    />
                    <Field
                        hideLabel
                        noTemplate
                        id="language-dropdown"
                        name="Language"
                        value=""
                        type="select"
                        options={[]}
                        ><For sourceList="languages" itemName="language" slot="options_templated">
                            <option value={variable("language[0]")}>
                                <Variable expression="language[1]" />
                            </option>
                        </For></Field
                    >
                    <div
                        id="save-indicator"
                        aria-label="Changes Saved!"
                        data-save-state="saved"
                        class="group my-auto"
                    >
                        <Icon
                            class="my-auto text-green-600 group-[[data-save-state=saving]]:animate-pulse group-[[data-save-state=saving]]:text-accent"
                            name="tabler:device-floppy"
                            size={32}
                        />
                    </div>
                    <Button id="reset-button" icon="tabler:restore" justIcon color="secondary" />
                </div>
                <div
                    id="editor"
                    class="align-center flex min-h-0 w-full grow justify-center rounded-2xl bg-background-50 p-2"
                >
                    <Icon
                        class="my-auto animate-pulse text-blue-300"
                        name="tabler:pencil"
                        size={60}
                    />
                </div>
            </Tile>
            <Tile class="group flex flex-col gap-2 has-[[data-expanded='true']]:h-[40%]">
                <div
                    data-expanded="true"
                    id="test-section-heading"
                    class="group flex flex-row justify-center gap-2 self-stretch align-middle"
                >
                    <Icon
                        class="my-auto hidden group-[[data-expanded='true']]:inline"
                        size={25}
                        name="tabler:chevron-down"
                    />
                    <Icon
                        class="my-auto hidden group-[[data-expanded='false']]:inline"
                        size={25}
                        name="tabler:chevron-up"
                    />
                    <h2 class="select-none text-center text-2xl">Test Solution</h2>
                </div>
                <div
                    class="flex w-full grow flex-row gap-4 group-has-[[data-expanded='false']]:hidden"
                >
                    <div class="flex h-full grow flex-col gap-2">
                        <Field
                            spellcheck="false"
                            data-gramm="false"
                            data-gramm_editor="false"
                            data-enable-grammarly="false"
                            class="h-full font-mono"
                            labelClass="grow"
                            wrapperClass="h-full"
                            labelSpanClass="h-full"
                            type="textarea"
                            noTemplate
                            id="debug-input"
                            label="Input"
                        />
                    </div>
                    <Label
                        label=" "
                        innerSpanClass="h-full"
                        class="flex flex-col gap-1 self-stretch text-center"
                    >
                        <span class="grow"></span>
                        <CaseIndicator
                            class="mx-auto"
                            id="test-indicator"
                            status="idle"
                            size={40}
                            iconMap={{
                                idle: "tabler:circle-dashed",
                                loading: "tabler:circle-dashed",
                                success: "tabler:circle-arrow-right",
                                error: "tabler:circle-x",
                                empty: "tabler:circle-dot"
                            }}
                        />
                        <span class="grow"></span>
                        <Button
                            class="mx-auto mb-1 mt-auto w-fit"
                            as="button"
                            disabled
                            id="run-debug"
                            color="secondary"
                            icon="tabler:bug">Test</Button
                        >
                    </Label>
                    <div class="flex h-full grow flex-col gap-2">
                        <Field
                            id="debug-output"
                            class="h-full p-2 font-mono"
                            labelClass="grow text-right"
                            wrapperClass="h-full"
                            labelSpanClass="h-full"
                            type="textarea"
                            noTemplate
                            readonly
                            label="Output"
                        />
                    </div>
                </div>
            </Tile>
        </div>
    </div>
</ContestLayout>

<script>
    import type { CodeInfo } from "@/lib/editor";
    import type { WebSocketRequest } from "@/lib/ws";
    import type * as monaco from "monaco-editor";

    let ws: WebSocket | null = null;
    let editor: monaco.editor.IStandaloneCodeEditor | null = null;
    let getLang: (() => string) | null = null;

    document.addEventListener("astro:page-load", () => {
        if (
            import.meta.env.PROD &&
            !window.location.pathname.match(/\/contests\/\d+\/problems\/.+\/?$/)
        ) {
            return;
        }

        const submitButton = document.querySelector("#submit") as HTMLButtonElement;
        const codeInfoElem = (document.querySelector("#code-info") as HTMLTextAreaElement)!;
        const editorElem = (document.querySelector("#editor") as HTMLElement)!;
        const runDebugButton = (document.querySelector("#run-debug") as HTMLButtonElement)!;
        const testInput = (document.querySelector("#debug-input") as HTMLTextAreaElement)!;
        const testOutput = (document.querySelector("#debug-output") as HTMLTextAreaElement)!;
        const debugCaseIndicator = (document.querySelector("#test-indicator") as HTMLElement)!;
        const runMessage = (document.querySelector("#runs-msg") as HTMLElement)!;
        const languageDropdown = (document.querySelector(
            "#language-dropdown"
        ) as HTMLSelectElement)!;
        const languageIcon = (document.querySelector("#language-icon") as HTMLImageElement)!;
        const runMessageWrapper = (document.querySelector("#runs-msg-wrapper") as HTMLElement)!;
        const testButtonTemplate = (document.querySelector(
            "#test-debug-template"
        ) as HTMLButtonElement)!;
        const saveIndicator = (document.querySelector("#save-indicator") as HTMLElement)!;
        const resetButton = (document.querySelector("#reset-button") as HTMLButtonElement)!;
        const testSectionHeader = (document.querySelector("#test-section-heading") as HTMLElement)!;
        const descriptionSectionChevron = (document.querySelector(
            "#description-section-chevron"
        ) as HTMLElement)!;

        const toggleButtons = (disabled: boolean) => {
            submitButton.disabled = disabled;
            runDebugButton.disabled = disabled;
            document.querySelectorAll(".example-button").forEach((b) => {
                (b as HTMLButtonElement).disabled = disabled;
            });
        };

        const contestId = submitButton.dataset.contestId!;
        const problemId = submitButton.dataset.problemId!;
        //const problemSlug = submitButton.dataset.problemSlug!;
        const defaultLanguage = submitButton.dataset.defaultLanguage!;
        const colorScheme = submitButton.dataset.colorPreference!;
        const loggedIn = submitButton.dataset.loggedIn === "true";

        testSectionHeader.onclick = () => {
            const expanded = testSectionHeader.dataset.expanded === "true";
            testSectionHeader.dataset.expanded = expanded ? "false" : "true";
            window.localStorage.setItem(
                `testSectionExpanded-${contestId}-${problemId}`,
                expanded ? "false" : "true"
            );
        };

        descriptionSectionChevron.onclick = () => {
            const expanded = descriptionSectionChevron.dataset.expanded === "true";
            descriptionSectionChevron.dataset.expanded = expanded ? "false" : "true";
            window.localStorage.setItem(
                `descriptionSectionExpanded-${contestId}-${problemId}`,
                expanded ? "false" : "true"
            );
        };

        if (
            window.localStorage.getItem(`testSectionExpanded-${contestId}-${problemId}`) === "false"
        ) {
            testSectionHeader.dataset.expanded = "false";
        }

        if (
            window.localStorage.getItem(`descriptionSectionExpanded-${contestId}-${problemId}`) ===
            "false"
        ) {
            descriptionSectionChevron.dataset.expanded = "false";
        }

        const codeInfo = JSON.parse(codeInfoElem.value ?? "{}") as CodeInfo;

        if (loggedIn) {
            import("@/lib/ws").then((c) => {
                console.debug("Preparing to connect to WebSocket");
                ws = c.default(
                    contestId,
                    problemId,
                    runMessageWrapper,
                    runMessage,
                    debugCaseIndicator,
                    testOutput,
                    toggleButtons
                );
            });
        }

        import("@/lib/editor").then((c) => {
            console.debug("Creating editor");
            const [newEditor, _getLang] = c.default(
                codeInfo,
                defaultLanguage,
                contestId,
                problemId,
                languageDropdown,
                colorScheme,
                editorElem,
                languageIcon,
                saveIndicator,
                resetButton
            );
            editor = newEditor as monaco.editor.IStandaloneCodeEditor;
            getLang = _getLang as () => string;
        });

        import("@/lib/highlighting").then((c) => {
            console.debug("Setting Up Code Block Highlighting");
            c.default(
                "#rendered-md",
                (input) => {
                    if (editor) {
                        testInput.value = input.trim();
                        runDebugButton.click();
                    }
                    if (testSectionHeader) {
                        testSectionHeader.dataset.expanded = "true";
                    }
                },
                testButtonTemplate
            );
        });

        import("@/lib/math").then((c) => {
            console.debug("Setting Up Math Block Highlighting");
            c.default();
        });

        runDebugButton.onclick = () => {
            if (editor && ws && getLang) {
                const req: WebSocketRequest = {
                    type: "test",
                    input: testInput.value,
                    language: getLang(),
                    program: editor.getValue()
                };
                console.debug("Sending request", req);
                ws.send(JSON.stringify(req));
                toggleButtons(true);
            }
        };

        submitButton.onclick = () => {
            if (editor && ws && getLang) {
                const req: WebSocketRequest = {
                    type: "judge",
                    program: editor.getValue(),
                    language: getLang()
                };
                console.debug("Sending request", req);
                ws.send(JSON.stringify(req));
                toggleButtons(true);
            }
        };
    });

    document.addEventListener("astro:after-swap", () => {
        if (ws) {
            ws.close();
            ws = null;
        }
        if (editor) {
            editor.dispose();
            editor = null;
        }
        if (getLang) {
            getLang = null;
        }
    });
</script>

<style is:global>
    #rendered-md > * {
        @apply !my-1 !py-2;
    }

    #rendered-md a {
        @apply text-accent underline hover:text-accent-600;
    }

    #rendered-md h1 {
        @apply text-3xl font-bold;
    }

    #rendered-md h2 {
        @apply text-2xl font-bold;
    }

    #rendered-md h3 {
        @apply text-xl font-bold;
    }

    #rendered-md h4 {
        @apply text-lg font-bold;
    }

    #rendered-md h5 {
        @apply text-base font-bold;
    }

    #rendered-md h6 {
        @apply text-sm font-bold;
    }

    #rendered-md p {
        @apply text-base;
    }

    #rendered-md ul {
        @apply list-inside list-disc;
    }

    #rendered-md ol {
        @apply list-inside list-decimal;
    }

    #rendered-md blockquote {
        @apply border-l-4 border-l-accent pl-2;
    }

    #rendered-md :not(pre) > code:not(.language-math) {
        @apply rounded bg-secondary-50 p-1 font-mono;
    }

    #rendered-md pre code.hljs {
        @apply rounded-lg !bg-secondary-50;
    }

    #rendered-md
        pre
        code:is([class*=" language-"], [class^="language-"]):not(.language-example):not(
            .language-math
        ):not(.hljs) {
        @apply opacity-0;
    }

    #language-icon {
        user-drag: none;
        -webkit-user-drag: none;
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        pointer-events: none;
    }
</style>
